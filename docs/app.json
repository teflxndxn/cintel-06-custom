[{"name": "app.py", "content": "from shiny import App, ui, render, reactive, req\nimport pandas as pd\n\n# ---------------------------\n# Imports\n# ---------------------------\n# We import pandas for data handling,\n# and shiny components for UI and reactivity.\n\n# ---------------------------\n# Reactive Aspects\n# ---------------------------\n\n# Use reactive.file_reader to watch for changes in flights.csv file on disk.\n# This means if the CSV is updated externally, the app will reload it automatically.\n\n@reactive.file_reader(\"flights.csv\")\ndef read_flights():\n    df = pd.read_csv(\"flights.csv\")\n    return df\n\n# ---------------------------\n# UI Page Inputs\n# ---------------------------\n\n# We'll create input widgets for user interaction:\n# 1) Select Year (single choice dropdown)\n# 2) Select Months (multiple choice checkboxes)\n\napp_ui = ui.page_sidebar(\n    # Sidebar panel with input controls\n    ui.sidebar(\n        ui.input_select(\"year\", \"Select Year\", choices=[], selected=None),\n        ui.input_checkbox_group(\"months\", \"Select Months\", choices=[], selected=[]),\n    ),\n    # Main content area showing outputs\n    ui.layout_column_wrap(\n        ui.h2(\"Flights Dashboard\"),\n        ui.output_text(\"selection_text\"),\n        ui.output_data_frame(\"filtered_table\"),\n        ui.output_plot(\"passenger_plot\"),\n    ),\n)\n\n# ---------------------------\n# Server Logic\n# ---------------------------\n\ndef server(input, output, session):\n\n    # Populate choices dynamically once data is loaded (reactive)\n    @reactive.Effect\n    def update_inputs():\n        df = read_flights()\n        years = sorted([str(int(y)) for y in df[\"year\"].unique()])\n        months = sorted(df[\"month\"].unique())\n\n        # Update year select input choices and default\n        ui.update_select(\"year\", choices=years, selected=years[0])\n\n        # Update months checkbox choices and default (select all)\n        ui.update_checkbox_group(\"months\", choices=months, selected=months)\n\n    # Reactive calc: Filter data based on inputs\n    @reactive.Calc\n    def filtered_data():\n        df = read_flights()  # auto-updated by reactive.file_reader\n        # Ensure inputs are ready\n        req(input.year())\n        req(input.months())\n\n        selected_year = int(input.year())\n        selected_months = input.months()\n\n        # Filter dataframe by selected year and months\n        filtered_df = df[\n            (df[\"year\"] == selected_year) &\n            (df[\"month\"].isin(selected_months))\n        ]\n        return filtered_df\n\n    # Output text showing current selection\n    @output\n    @render.text\n    def selection_text():\n        return f\"Showing data for year {input.year()} and months {', '.join(input.months())}\"\n\n    # Output filtered data table\n    @output\n    @render.data_frame\n    def filtered_table():\n        return filtered_data()\n\n    # Output plot of passengers by month\n    @output\n    @render.plot\n    def passenger_plot():\n        import matplotlib.pyplot as plt\n\n        df = filtered_data()\n        fig, ax = plt.subplots()\n        ax.bar(df[\"month\"], df[\"passengers\"])\n        ax.set_title(f\"Passengers in {input.year()}\")\n        ax.set_ylabel(\"Passengers\")\n        ax.set_xlabel(\"Month\")\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        return fig\n\n\n# ---------------------------\n# Create App object\n# ---------------------------\n\napp = App(app_ui, server)\n", "type": "text"}]